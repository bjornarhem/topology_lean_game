msgid ""
msgstr "Project-Id-Version: Game v4.7.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: Wed Jul 30 13:53:06 2025\n"
"Last-Translator: \n"
"Language-Team: none\n"
"Language: en\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit"

#: GameServer.RpcHandlers
msgid "level completed! ðŸŽ‰"
msgstr ""

#: GameServer.RpcHandlers
msgid "level completed with warningsâ€¦ ðŸŽ­"
msgstr ""

#: GameServer.RpcHandlers
msgid "intermediate goal solved! ðŸŽ‰"
msgstr ""

#: Game.Levels.Functions.L01_functions
msgid "Intro to functions"
msgstr ""

#: Game.Levels.Functions.L01_functions
msgid "Let's warm up with the following simple exercise."
msgstr ""

#: Game.Levels.Functions.L01_functions
msgid "Show that if $x = y$, then $f(x) = f(y)$."
msgstr ""

#: Game.Levels.Functions.L01_functions
msgid "You can use the `subst` tactic to replace `y` with `x`. Typing either `subst h` or `subst y` will work."
msgstr ""

#: Game.Levels.Functions.L01_functions
msgid "Now you can use `rfl` to finish the proof. Recall that `rfl` means that the left-hand side and right-hand side of the equation are definitionally equal."
msgstr ""

#: Game.Levels.Functions.L01_functions
msgid "Level completed!"
msgstr ""

#: Game.Levels.Functions.L02_image
msgid "Images of functions"
msgstr ""

#: Game.Levels.Functions.L02_image
msgid "If $f \\colon X \\to Y$ and $A \\in X$, then the image of $A$ under $f$ is the set\n"
"$f(A) = \\{ f(x) \\mid x \\in A \\}$. In lean, this is denoted `f '' A` or `image f A`.\n"
"\n"
"A hypothesis `y âˆˆ f '' A ` decomposes as a triple âŸ¨x, hxA, rflâŸ©, where `x` is an element of `A`, `hxA` is the proof that `x âˆˆ A`, and `rfl` is the proof that `f x = y`. This is a common pattern when working with images in Lean.\n"
"In this level, we will use the `rintro` tactic to decompose such hypotheses. The `rintro` tactic is a combination of `intro` and `rfl`, which allows us to introduce variables and patterns in one step.\n"
"Whenever you introduce a hypothesis of the form `y âˆˆ f '' A`, you can write `rintro âŸ¨x, hxA, rflâŸ©` to immediately decompose it into its components.\n"
"To write the symbols `âŸ¨` and `âŸ©`, you can write \\langle and \\rangle, respectively.\n"
"\n"
"We start by proving a property of images: if $A âŠ† B$, then $f(A) âŠ† f(B)$."
msgstr ""

#: Game.Levels.Functions.L02_image
msgid "If A âŠ† B, then $f(A) âŠ† f(B)$."
msgstr ""

#: Game.Levels.Functions.L02_image
msgid "Let's star by choosing an element `y` in the left-hand side, using `intro`."
msgstr ""

#: Game.Levels.Functions.L02_image
msgid "Use `rintro` to introduce the hypothesis `y âˆˆ f '' A` and decompose it into a triple âŸ¨x, hxA, rflâŸ©."
msgstr ""

#: Game.Levels.Functions.L02_image
msgid "You can use the keyword `have` to create the hypothesis `x âˆˆ B`."
msgstr ""

#: Game.Levels.Functions.L02_image
msgid "You can now complete the proof using `exact âŸ¨ x, hxB, rfl âŸ©`."
msgstr ""

#: Game.Levels.Functions.L02_image
msgid "Well done!\n"
"If you don't want to use `rintro`, you can also apply the theorem `Set.mem_image`.\n"
"The command `rw [Set.mem_image] at h` will rewrite a hypothesis `h : y âˆˆ f '' A` into `âˆƒ x âˆˆ A, f x = y`."
msgstr ""

#: Game.Levels.Functions.L03_image_union
msgid "Images of functions"
msgstr ""

#: Game.Levels.Functions.L03_image_union
msgid "In this level, we will prove that the image of the union of two sets is equal to the union of their images."
msgstr ""

#: Game.Levels.Functions.L03_image_union
msgid "Show that $f(A âˆª B) = f(A) âˆª f(B)$."
msgstr ""

#: Game.Levels.Functions.L03_image_union
msgid "Recall that you can use the `ext` tactic to prove that two sets are equal."
msgstr ""

#: Game.Levels.Functions.L03_image_union
msgid "You can use Iff.intro to split the goal into two subgoals."
msgstr ""

#: Game.Levels.Functions.L03_image_union
msgid "As in the last level, you can use `rintro` here."
msgstr ""

#: Game.Levels.Functions.L03_image_union
msgid "You can use `cases hx` to split the proof into two cases."
msgstr ""

#: Game.Levels.Functions.L03_image_union
msgid "Recall the syntax `exact âŸ¨x, h, rflâŸ©` to finish the proof in each case."
msgstr ""

#: Game.Levels.Functions.L03_image_union
msgid "..."
msgstr ""

#: Game.Levels.Functions.L03_image_union
msgid "Level completed!"
msgstr ""

#: Game.Levels.Functions
msgid "Functions"
msgstr ""

#: Game.Levels.Functions
msgid "This module contains exercises related to functions, images, and preimages."
msgstr ""

#: Game
msgid "My Game"
msgstr ""

#: Game
msgid "This text appears on the starting page where one selects the world/level to play.\n"
"You can use markdown."
msgstr ""

#: Game
msgid "Here you can put additional information about the game. It is accessible\n"
"from the starting through the drop-down menu.\n"
"\n"
"For example: Game version, Credits, Link to Github and Zulip, etc.\n"
"\n"
"Use markdown."
msgstr ""

#: Game
msgid "Game Template"
msgstr ""

#: Game
msgid "You should use this game as a template for your own game and add your own levels."
msgstr ""
